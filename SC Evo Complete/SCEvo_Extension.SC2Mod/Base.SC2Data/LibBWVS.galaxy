include "TriggerLibs/NativeLib"
include "LibAE8FC9D3"

include "LibBWVS_h"

//--------------------------------------------------------------------------------------------------
// Library: SCEvoExtension
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libBWVS_InitLibraries () {
    libNtve_InitVariables();
    libAE8FC9D3_InitVariables();
}

// Variable Initialization
bool libBWVS_InitVariables_completed = false;

void libBWVS_InitVariables () {
    if (libBWVS_InitVariables_completed) {
        return;
    }

    libBWVS_InitVariables_completed = true;

}

// Presets
// Functions
void libBWVS_gf_KL_InitExtension () {
    // Variable Declarations
    int lv_activePlayers;
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto29948115_g;
    int auto29948115_var;

    // Variable Initialization

    // Implementation
    libAE8FC9D3_gf_InitializeAchievements();
    auto29948115_g = PlayerGroupActive();
    auto29948115_var = -1;
    while (true) {
        auto29948115_var = PlayerGroupNextPlayer(auto29948115_g, auto29948115_var);
        if (auto29948115_var < 0) { break; }
        lv_activePlayers += 1;
        if ((libBWVS_gv_kL_ExtensionInitialized[lv_activePlayers] == true)) {
            return ;
        }

        if (((GameAttributePlayerValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]500", lv_activePlayers) == "Comp"))) {
        }
        else {
            libBWVS_gv_kL_ExtensionInitialized[lv_activePlayers] = true;
            libAE8FC9D3_gf_KL_BankLoad(lv_activePlayers);
        }
    }
    if (((GameAttributePlayerValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]500", lv_activePlayers) == "Comp"))) {
    }
    else {
        libBWVS_gf_KL_LoadGameVariables();
    }
}

void libBWVS_gf_KL_LoadGameVariables () {
    // Variable Declarations
    int lv_indexPlayer1;
    int lv_indexPlayer2;
    int lv_enemyHumanPlayers;
    int lv_alliedHumanPlayers;
    int lv_enemyAIPlayers;
    int lv_alliedAIPlayers;
    bool lv_gameIsCompetitive;
    bool lv_gameIsVSAI;
    string lv__GameMode;
    string lv__Race;
    string lv__Section;

    // Automatic Variable Declarations
    playergroup auto512C5ABD_g;
    playergroup autoB9454417_g;
    int autoA1761808_val;
    int auto24D77C21_val;
    bool autoAAB691F9_val;
    string auto586F1D77_val;
    string autoF9345B98_val;

    // Variable Initialization
    lv__GameMode = "CustomTeams";
    lv__Race = "Random";
    lv__Section = "";

    // Implementation
    if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "3241")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_BWVS_C877C176"));
        lv__GameMode = "1v1";
    }
    else if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "3307")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_BWVS_A203A826"));
        lv__GameMode = "2v2";
    }
    else if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "3372")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_BWVS_800EABA1"));
        lv__GameMode = "3v3";
    }
    else if (((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "3438") || (GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "3503") || (GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "3569"))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_BWVS_6823A9CC"));
        lv__GameMode = "CustomTeams";
    }
    else if (((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "4605"))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_BWVS_ADC7AB9B"));
        lv__GameMode = "FFA";
    }
    auto512C5ABD_g = PlayerGroupActive();
    lv_indexPlayer1 = -1;
    while (true) {
        lv_indexPlayer1 = PlayerGroupNextPlayer(auto512C5ABD_g, lv_indexPlayer1);
        if (lv_indexPlayer1 < 0) { break; }
        if ((PlayerType(lv_indexPlayer1) != c_playerTypeComputer)) {
            if ((GameAttributePlayerValue("[bnet:Liberty (Mod)/0.0/999,file:Mods/Liberty.SC2Mod]3001", lv_indexPlayer1) == "RAND")) {
                lv__Race = "Random";
            }
            else if (((GameAttributePlayerValue("[bnet:Liberty (Mod)/0.0/999,file:Mods/Liberty.SC2Mod]3001", lv_indexPlayer1) == "BWPr") || (GameAttributePlayerValue("[bnet:Liberty (Mod)/0.0/999,file:Mods/Liberty.SC2Mod]3001", lv_indexPlayer1) == "Prot") || (PlayerRace(lv_indexPlayer1) == "BWPr"))) {
                lv__Race = "Protoss";
            }
            else if (((GameAttributePlayerValue("[bnet:Liberty (Mod)/0.0/999,file:Mods/Liberty.SC2Mod]3001", lv_indexPlayer1) == "BWTe") || (GameAttributePlayerValue("[bnet:Liberty (Mod)/0.0/999,file:Mods/Liberty.SC2Mod]3001", lv_indexPlayer1) == "Terr") || (PlayerRace(lv_indexPlayer1) == "BWTe"))) {
                lv__Race = "Terran";
            }
            else if (((GameAttributePlayerValue("[bnet:Liberty (Mod)/0.0/999,file:Mods/Liberty.SC2Mod]3001", lv_indexPlayer1) == "BWZe") || (GameAttributePlayerValue("[bnet:Liberty (Mod)/0.0/999,file:Mods/Liberty.SC2Mod]3001", lv_indexPlayer1) == "Zerg") || (PlayerRace(lv_indexPlayer1) == "BWZe"))) {
                lv__Race = "Zerg";
            }
            autoB9454417_g = PlayerGroupActive();
            lv_indexPlayer2 = -1;
            while (true) {
                lv_indexPlayer2 = PlayerGroupNextPlayer(autoB9454417_g, lv_indexPlayer2);
                if (lv_indexPlayer2 < 0) { break; }
                if ((PlayerGroupSingle(lv_indexPlayer1) != PlayerGroupSingle(lv_indexPlayer2))) {
                    if ((libNtve_gf_PlayerIsEnemy(lv_indexPlayer1, lv_indexPlayer2, libNtve_ge_PlayerRelation_Ally) == true)) {
                        autoA1761808_val = PlayerType(lv_indexPlayer2);
                        if (autoA1761808_val == c_playerTypeUser) {
                            lv_alliedHumanPlayers += 1;
                        }
                        else if (autoA1761808_val == c_playerTypeComputer) {
                            lv_alliedAIPlayers += 1;
                        }
                        else {
                        }
                    }

                    if ((libNtve_gf_PlayerIsEnemy(lv_indexPlayer1, lv_indexPlayer2, libNtve_ge_PlayerRelation_Enemy) == true)) {
                        auto24D77C21_val = PlayerType(lv_indexPlayer2);
                        if (auto24D77C21_val == c_playerTypeUser) {
                            lv_enemyHumanPlayers += 1;
                        }
                        else if (auto24D77C21_val == c_playerTypeComputer) {
                            lv_enemyAIPlayers += 1;
                        }
                        else {
                        }
                    }

                }

            }
            if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "3241") && (lv_enemyHumanPlayers == 1)) {
                lv_gameIsCompetitive = true;
            }
            else if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "3241") && (lv_enemyAIPlayers == 1)) {
                lv_gameIsCompetitive = true;
                lv_gameIsVSAI = true;
            }
            else if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "3307") && (lv_enemyHumanPlayers == 2) && (lv_alliedHumanPlayers == 1)) {
                lv_gameIsCompetitive = true;
            }
            else if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "3307") && (lv_enemyAIPlayers == 2) && (lv_alliedHumanPlayers == 1)) {
                lv_gameIsCompetitive = true;
                lv_gameIsVSAI = true;
            }
            else if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "3372") && (lv_enemyHumanPlayers == 3) && (lv_alliedHumanPlayers == 2)) {
                lv_gameIsCompetitive = true;
            }
            else if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]2001") == "3372") && (lv_enemyAIPlayers == 3) && (lv_alliedHumanPlayers == 2)) {
                lv_gameIsCompetitive = true;
                lv_gameIsVSAI = true;
            }
            if ((lv_enemyAIPlayers > 0)) {
                lv_gameIsVSAI = true;
            }

            lv__Section = ((lv__GameMode) + ("Terran") + ("Games"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_terranGames = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_terranGames, lv_indexPlayer1, 1, 1);
            lv__Section = ((lv__GameMode) + ("Zerg") + ("Games"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_zergGames = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_zergGames, lv_indexPlayer1, 1, 2);
            lv__Section = ((lv__GameMode) + ("Protoss") + ("Games"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_protossGames = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_protossGames, lv_indexPlayer1, 1, 3);
            lv__Section = ((lv__GameMode) + ("Random") + ("Games"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_randomGames = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_randomGames, lv_indexPlayer1, 1, 4);
            lv__Section = ((lv__GameMode) + ("Terran") + ("Wins"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_terranWins = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_terranWins, lv_indexPlayer1, 2, 1);
            lv__Section = ((lv__GameMode) + ("Zerg") + ("Wins"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_zergWins = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_zergWins, lv_indexPlayer1, 2, 2);
            lv__Section = ((lv__GameMode) + ("Protoss") + ("Wins"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_protossWins = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_protossWins, lv_indexPlayer1, 2, 3);
            lv__Section = ((lv__GameMode) + ("Random") + ("Wins"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_randomWins = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_randomWins, lv_indexPlayer1, 2, 4);
            lv__Section = ((lv__GameMode) + ("A.I.") + ("Terran") + ("Games"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_terranGamesAI = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_terranGamesAI, lv_indexPlayer1, 3, 1);
            lv__Section = ((lv__GameMode) + ("A.I.") + ("Zerg") + ("Games"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_zergGamesAI = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_zergGamesAI, lv_indexPlayer1, 3, 2);
            lv__Section = ((lv__GameMode) + ("A.I.") + (lv__Race) + ("Wins"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_protossGamesAI = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_zergGamesAI, lv_indexPlayer1, 3, 3);
            lv__Section = ((lv__GameMode) + ("A.I.") + (lv__Race) + ("Streak"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_randomGamesAI = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_randomGamesAI, lv_indexPlayer1, 3, 4);
            lv__Section = ((lv__GameMode) + ("A.I.") + ("Terran") + ("Wins"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_terranWinsAI = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_terranWinsAI, lv_indexPlayer1, 4, 1);
            lv__Section = ((lv__GameMode) + ("A.I.") + ("Zerg") + ("Wins"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_zergWinsAI = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_zergWinsAI, lv_indexPlayer1, 4, 2);
            lv__Section = ((lv__GameMode) + ("A.I.") + ("Protoss") + ("Wins"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_protossWinsAI = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_protossWinsAI, lv_indexPlayer1, 4, 3);
            lv__Section = ((lv__GameMode) + ("A.I.") + ("Random") + ("Wins"));
            libBWVS_gv_localStats[lv_indexPlayer1].lv_randomWinsAI = libBWVS_gf_KL_ReturnSectionValueInteger(lv__Section, lv_indexPlayer1);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_randomWinsAI, lv_indexPlayer1, 4, 4);
            autoAAB691F9_val = lv_gameIsVSAI;
            if (autoAAB691F9_val == false) {
                auto586F1D77_val = lv__Race;
                if (auto586F1D77_val == "Terran") {
                    libBWVS_gv_localStats[lv_indexPlayer1].lv_terranGames += 1;
                    libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_terranGames, lv_indexPlayer1, 1, 1);
                }
                else if (auto586F1D77_val == "Zerg") {
                    libBWVS_gv_localStats[lv_indexPlayer1].lv_zergGames += 1;
                    libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_zergGames, lv_indexPlayer1, 1, 2);
                }
                else if (auto586F1D77_val == "Protoss") {
                    libBWVS_gv_localStats[lv_indexPlayer1].lv_protossGames += 1;
                    libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_protossGames, lv_indexPlayer1, 1, 3);
                }
                else {
                    libBWVS_gv_localStats[lv_indexPlayer1].lv_randomGames += 1;
                    libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_randomGames, lv_indexPlayer1, 1, 4);
                }
            }
            else if (autoAAB691F9_val == true) {
                autoF9345B98_val = lv__Race;
                if (autoF9345B98_val == "Terran") {
                    libBWVS_gv_localStats[lv_indexPlayer1].lv_terranGamesAI += 1;
                    libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_terranGamesAI, lv_indexPlayer1, 3, 1);
                }
                else if (autoF9345B98_val == "Zerg") {
                    libBWVS_gv_localStats[lv_indexPlayer1].lv_zergGamesAI += 1;
                    libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_zergGamesAI, lv_indexPlayer1, 3, 2);
                }
                else if (autoF9345B98_val == "Protoss") {
                    libBWVS_gv_localStats[lv_indexPlayer1].lv_protossGamesAI += 1;
                    libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_protossGamesAI, lv_indexPlayer1, 3, 3);
                }
                else {
                    libBWVS_gv_localStats[lv_indexPlayer1].lv_randomGamesAI += 1;
                    libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_randomGamesAI, lv_indexPlayer1, 3, 4);
                }
            }
            else {
            }
            libBWVS_gv_localStats[lv_indexPlayer1].lv_totalGames = (libBWVS_gv_localStats[lv_indexPlayer1].lv_terranGames + libBWVS_gv_localStats[lv_indexPlayer1].lv_zergGames + libBWVS_gv_localStats[lv_indexPlayer1].lv_protossGames + libBWVS_gv_localStats[lv_indexPlayer1].lv_randomGames);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_totalGames, lv_indexPlayer1, 0, 1);
            libBWVS_gv_localStats[lv_indexPlayer1].lv_totalWins = (libBWVS_gv_localStats[lv_indexPlayer1].lv_terranWins + libBWVS_gv_localStats[lv_indexPlayer1].lv_zergWins + libBWVS_gv_localStats[lv_indexPlayer1].lv_protossWins + libBWVS_gv_localStats[lv_indexPlayer1].lv_randomWins);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_totalWins, lv_indexPlayer1, 0, 2);
            libBWVS_gv_localStats[lv_indexPlayer1].lv_totalGamesAI = (libBWVS_gv_localStats[lv_indexPlayer1].lv_terranGamesAI + libBWVS_gv_localStats[lv_indexPlayer1].lv_zergGamesAI + libBWVS_gv_localStats[lv_indexPlayer1].lv_protossGamesAI + libBWVS_gv_localStats[lv_indexPlayer1].lv_randomGamesAI);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_totalGamesAI, lv_indexPlayer1, 0, 3);
            libBWVS_gv_localStats[lv_indexPlayer1].lv_totalWinsAI = (libBWVS_gv_localStats[lv_indexPlayer1].lv_terranWinsAI + libBWVS_gv_localStats[lv_indexPlayer1].lv_zergWinsAI + libBWVS_gv_localStats[lv_indexPlayer1].lv_protossWinsAI + libBWVS_gv_localStats[lv_indexPlayer1].lv_randomWinsAI);
            libAE8FC9D3_gf_KL_SetStatLabelValue(libBWVS_gv_localStats[lv_indexPlayer1].lv_totalWinsAI, lv_indexPlayer1, 0, 4);
        }

    }
}

void libBWVS_gf_KL_MeleeBankPreload (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoBF599FF6_val;

    // Variable Initialization

    // Implementation
    autoBF599FF6_val = lp_player;
    if (autoBF599FF6_val == 1) {
    }
    else if (autoBF599FF6_val == 2) {
    }
    else if (autoBF599FF6_val == 3) {
    }
    else if (autoBF599FF6_val == 4) {
    }
    else if (autoBF599FF6_val == 5) {
    }
    else if (autoBF599FF6_val == 6) {
    }
    else if (autoBF599FF6_val == 7) {
    }
    else if (autoBF599FF6_val == 8) {
    }
    else if (autoBF599FF6_val == 9) {
    }
    else if (autoBF599FF6_val == 10) {
    }
    else if (autoBF599FF6_val == 11) {
    }
    else if (autoBF599FF6_val == 12) {
    }
    else {
    }
}

void libBWVS_gf_KL_MeleeBankLoad (int lp_Player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libBWVS_gf_KL_MeleeBankPreload(lp_Player);
    if ((lp_Player == 1)) {
        BankLoad(libBWVS_gv_kL_StatBankNameConstant, 1);
        libBWVS_gv_KL_SharedBankP1 = BankLastCreated();
    }

    if ((lp_Player == 2)) {
        BankLoad(libBWVS_gv_kL_StatBankNameConstant, 2);
        libBWVS_gv_KL_SharedBankP2 = BankLastCreated();
    }

    if ((lp_Player == 3)) {
        BankLoad(libBWVS_gv_kL_StatBankNameConstant, 3);
        libBWVS_gv_KL_SharedBankP3 = BankLastCreated();
    }

    if ((lp_Player == 4)) {
        BankLoad(libBWVS_gv_kL_StatBankNameConstant, 4);
        libBWVS_gv_KL_SharedBankP4 = BankLastCreated();
    }

    if ((lp_Player == 5)) {
        BankLoad(libBWVS_gv_kL_StatBankNameConstant, 5);
        libBWVS_gv_KL_SharedBankP5 = BankLastCreated();
    }

    if ((lp_Player == 6)) {
        BankLoad(libBWVS_gv_kL_StatBankNameConstant, 6);
        libBWVS_gv_KL_SharedBankP6 = BankLastCreated();
    }

    if ((lp_Player == 7)) {
        BankLoad(libBWVS_gv_kL_StatBankNameConstant, 7);
        libBWVS_gv_KL_SharedBankP7 = BankLastCreated();
    }

    if ((lp_Player == 8)) {
        BankLoad(libBWVS_gv_kL_StatBankNameConstant, 8);
        libBWVS_gv_KL_SharedBankP8 = BankLastCreated();
    }

    if ((lp_Player == 9)) {
        BankLoad(libBWVS_gv_kL_StatBankNameConstant, 9);
        libBWVS_gv_KL_SharedBankP9 = BankLastCreated();
    }

    if ((lp_Player == 10)) {
        BankLoad(libBWVS_gv_kL_StatBankNameConstant, 10);
        libBWVS_gv_KL_SharedBankP10 = BankLastCreated();
    }

    if ((lp_Player == 11)) {
        BankLoad(libBWVS_gv_kL_StatBankNameConstant, 11);
        libBWVS_gv_KL_SharedBankP11 = BankLastCreated();
    }

    if ((lp_Player == 12)) {
        BankLoad(libBWVS_gv_kL_StatBankNameConstant, 12);
        libBWVS_gv_KL_SharedBankP12 = BankLastCreated();
    }

    BankOptionSet(libBWVS_gf_KL_ReturnMeleePlayerBank(lp_Player), c_bankOptionSignature, true);
    BankWait(BankLastCreated());
    BankSave(libAE8FC9D3_gf_ReturnPlayerBank(lp_Player));
}

void libBWVS_gf_KL_MeleeBankSave (int lp_player, bool lp_update) {
    // Variable Declarations
    bank lv_localBank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_localBank = libBWVS_gf_KL_ReturnMeleePlayerBank(lp_player);
    if ((BankVerify(lv_localBank) != true)) {
        return ;
    }

    BankSave(lv_localBank);
}

bank libBWVS_gf_KL_ReturnMeleePlayerBank (int lp_player) {
    // Variable Declarations
    bool lv_achievementState;

    // Automatic Variable Declarations
    int autoC46BFC34_val;

    // Variable Initialization

    // Implementation
    autoC46BFC34_val = lp_player;
    if (autoC46BFC34_val == 1) {
        return libBWVS_gv_KL_SharedBankP1;
    }
    else if (autoC46BFC34_val == 2) {
        return libBWVS_gv_KL_SharedBankP2;
    }
    else if (autoC46BFC34_val == 3) {
        return libBWVS_gv_KL_SharedBankP3;
    }
    else if (autoC46BFC34_val == 4) {
        return libBWVS_gv_KL_SharedBankP4;
    }
    else if (autoC46BFC34_val == 5) {
        return libBWVS_gv_KL_SharedBankP5;
    }
    else if (autoC46BFC34_val == 6) {
        return libBWVS_gv_KL_SharedBankP6;
    }
    else if (autoC46BFC34_val == 7) {
        return libBWVS_gv_KL_SharedBankP7;
    }
    else if (autoC46BFC34_val == 8) {
        return libBWVS_gv_KL_SharedBankP8;
    }
    else if (autoC46BFC34_val == 9) {
        return libBWVS_gv_KL_SharedBankP9;
    }
    else if (autoC46BFC34_val == 10) {
        return libBWVS_gv_KL_SharedBankP10;
    }
    else if (autoC46BFC34_val == 11) {
        return libBWVS_gv_KL_SharedBankP11;
    }
    else if (autoC46BFC34_val == 12) {
        return libBWVS_gv_KL_SharedBankP12;
    }
    else {
        return null;
    }
}

string libBWVS_gf_KL_BankSectionName (string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    return ("SCEvo" + "|" + lp_section);
}

int libBWVS_gf_KL_ReturnSectionValueInteger (string lp_section, int lp_player) {
    // Variable Declarations
    const string lv_keyName = "KeyInt";
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((BankSectionExists(libBWVS_gf_KL_ReturnMeleePlayerBank(lp_player), libBWVS_gf_KL_BankSectionName(lp_section)) == true)) {
        lv_value = BankValueGetAsInt(libBWVS_gf_KL_ReturnMeleePlayerBank(lp_player), libBWVS_gf_KL_BankSectionName(lp_section), lv_keyName);
        return lv_value;
    }
    else {
        return 0;
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Race Initialization
//--------------------------------------------------------------------------------------------------
bool libBWVS_gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup auto05635F0B_g;
    string auto622447C6_val;
    string auto373AF487_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libBWVS_gf_KL_InitExtension();
    auto05635F0B_g = PlayerGroupActive();
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto05635F0B_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        if ((PlayerType(lv_playerIndex) == c_playerTypeUser)) {
            auto373AF487_val = PlayerRace(lv_playerIndex);
            if (auto373AF487_val == "Terr") {
                PlayerSetRace(lv_playerIndex, "BWTe");
            }
            else if (auto373AF487_val == "Prot") {
                PlayerSetRace(lv_playerIndex, "BWPr");
            }
            else if (auto373AF487_val == "Zerg") {
                PlayerSetRace(lv_playerIndex, "BWZe");
            }
            else {
                PlayerSetRace(lv_playerIndex, "BWTe");
            }
            libNtve_gf_HideGameUI(false, PlayerGroupSingle(lv_playerIndex));
            libNtve_gf_HideGameUI(true, PlayerGroupSingle(lv_playerIndex));
        }
        else {
            if ((PlayerType(lv_playerIndex) == c_playerTypeComputer)) {
                auto622447C6_val = PlayerRace(lv_playerIndex);
                if (auto622447C6_val == "Terr") {
                    PlayerSetRace(lv_playerIndex, "BWTe");
                }
                else if (auto622447C6_val == "Prot") {
                    PlayerSetRace(lv_playerIndex, "BWPr");
                }
                else if (auto622447C6_val == "Zerg") {
                    PlayerSetRace(lv_playerIndex, "BWZe");
                }
                else {
                    PlayerSetRace(lv_playerIndex, "BWTe");
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBWVS_gt_MapInitialization_Init () {
    libBWVS_gt_MapInitialization = TriggerCreate("libBWVS_gt_MapInitialization_Func");
    TriggerAddEventMapInit(libBWVS_gt_MapInitialization);
}

void libBWVS_InitTriggers () {
    libBWVS_gt_MapInitialization_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libBWVS_InitLib_completed = false;

void libBWVS_InitLib () {
    if (libBWVS_InitLib_completed) {
        return;
    }

    libBWVS_InitLib_completed = true;

    libBWVS_InitLibraries();
    libBWVS_InitVariables();
    libBWVS_InitTriggers();
}

