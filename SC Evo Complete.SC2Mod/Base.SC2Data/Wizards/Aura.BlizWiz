<?xml version="1.0" encoding="UTF-8" standalone="no" ?>

<wizard id="CreateAuraBehaviorSCBW">

	<name>Aura Creation</name>
	<description>Creates an aura with proper/efficient implementation. Most auras are created with the rapid applicationo of a behavior that has a short duration. This implementation instead uses validators to correctly remove the behavior once the target is beyond the range of the caster</description>
	<objecttypes create="Validator;Behavior;Effect"/>
	<instructions>
		Create an aura from an existing behavior
		Choose the behavior and radius of the aura.
		If this aura is permanent (the source of it can NOT die), then select the checkbox "Permanent"
	</instructions>
	
	<input id = "AuraBehavior" type = "CBehaviorLink">
		<name>Aura Behavior</name>
	</input>
	
	<input id = "PermanentAura" type = "WizardCheckbox">
		<name>Permanent</name>
	</input>
	
	<input id = "AuraRadius" type = "real32">
		<name>Aura Radius</name>
	</input>
	
	<input id = "AuraFilters" type = "CTargetFilters">
		<name>Aura Filters</name>
		<default value = "-;Self,Neutral,Enemy,Air,Robotic,Structure,User1,Worker,RawResource,HarvestableResource,Missile,Item,UnderConstruction,Dead,Hidden,Hallucination,Summoned"/>
	</input>
	
	<condition id = "NotPermAura" input = "PermanentAura" value = "0"/>
	
	<entry catalog = "Validator" type = "CValidatorUnitCompareBehaviorCount">
		<id>Should^AuraBehavior^Apply</id>
		<field id = "Behavior">
			<value>^AuraBehavior^</value>
		</field>
	</entry>
	
	<entry catalog = "Validator" type = "CValidatorLocationCompareRange">
		<id>^AuraBehavior^RangeValidator</id>
		<field id = "WhichLocation_Value">
			<value>TargetUnit</value>
		</field>
		<field id = "Compare">
			<value>LE</value>
		</field>
		<field id = "Range">
			<value>^AuraRadius^</value>
		</field>
	</entry>
	
	<entry catalog = "Behavior" type = "CBehaviorBuff">
		<id>^AuraBehavior^Searcher</id>
		<field id = "Period">
			<value>1</value>
		</field>
		<field id = "InfoFlags">
			<index>0</index>
			<value>1</value>
		</field>
		<field id = "PeriodicEffect">
			<value>^AuraBehavior^Search</value>
		</field>
			
	</entry>
	
	<entry catalog = "Behavior" type = "CBehaviorBuff">
		<id>^AuraBehavior^</id>
		<allowmodify/>
		<field id = "RemoveValidatorArray">
			<condition id = "NotPermAura"/>
			<value>SourceNotDead</value>
			<index>ref=Behavior,^AuraBehavior^,RemoveValidatorArray#</index>
		</field>
		<field id = "RemoveValidatorArray">
			<value>^AuraBehavior^RangeValidator</value>
			<index>ref=Behavior,^AuraBehavior^,RemoveValidatorArray#</index>
		</field>	
	</entry>
	
	<entry catalog = "Effect" type = "CEffectApplyBehavior">
		<id>^AuraBehavior^Apply</id>
		<field id = "Behavior">
			<value>^AuraBehavior^</value>
		</field>
		<field id = "ValidatorArray">
			<index>0</index>
			<value>Should^AuraBehavior^Apply</value>
		</field>
	</entry>
	
	<entry catalog = "Effect" type = "CEffectEnumArea">
		<id>^AuraBehavior^Search</id>
		<field id = "AreaArray_Radius">
			<index>0</index>
			<value>^AuraRadius^</value>
		</field>
		<field id = "AreaArray_Effect">
			<index>0</index>
			<value>^AuraBehavior^Apply</value>
		</field>
		<field id = "SearchFilters">
			<value>^AuraFilters^</value>
		</field>
	</entry>
	
</wizard>