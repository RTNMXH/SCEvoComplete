//==================================================================================================
//  Scion BWTerran Melee AI
//==================================================================================================

//include "TriggerLibs/BWTerran/BWTerranVyEy"
include "TriggerLibs/BWTerran/BWTerranEasy"
//include "TriggerLibs/BWTerran/BWTerranMedi"
//include "TriggerLibs/BWTerran/BWTerranMdHd"
//include "TriggerLibs/BWTerran/BWTerranHard"
//include "TriggerLibs/BWTerran/BWTerranHdVH"
//include "TriggerLibs/BWTerran/BWTerranVyHd"
//include "TriggerLibs/BWTerran/BWTerranChVi"
//include "TriggerLibs/BWTerran/BWTerranChRe"
//include "TriggerLibs/BWTerran/BWTerranChIn"

//--------------------------------------------------------------------------------------------------
//  Counter-Attack Units
//--------------------------------------------------------------------------------------------------
static void InitCounters (int player) {
    // versus BroodWar Terran
    AICounterUnitSetup(player, c_BWTU_Marine,           1.00, c_BWTU_Firebat,   0.20, c_BWTU_SiegeTank);
    AICounterUnitSetup(player, c_BWTU_Firebat,          0.60, c_BWTU_Marine,    1.00, c_BWTU_Firebat);
    AICounterUnitSetup(player, c_BWTU_Medic,            0.60, c_BWTU_Marine,    0.60, c_BWTU_Firebat);
    AICounterUnitSetup(player, c_BWTU_Ghost,            1.00, c_BWTU_Goliath,   2.00, c_BWTU_Battlecruiser);
    AICounterUnitSetup(player, c_BWTU_Vulture,          1.00, c_BWTU_Marine,    2.00, c_BWTU_Firebat);
    AICounterUnitSetup(player, c_TU_SiegeTank_Alias,    1.00, c_BWTU_SiegeTank, 1.00, c_BWTU_Marine);
    AICounterUnitSetup(player, c_BWTU_Goliath,          2.00, c_BWTU_Wraith,    4.00, c_BWTU_Dropship);
    AICounterUnitSetup(player, c_BWTU_Dropship,         0.60, c_BWTU_Wraith,    0.60, c_BWTU_Valkyrie);
    AICounterUnitSetup(player, c_BWTU_ScienceVessel,    0.60, c_BWTU_Wraith,    0.60, c_BWTU_Valkyrie);
    AICounterUnitSetup(player, c_BWTU_Wraith,           2.00, c_BWTU_Dropship,  1.00, c_BWTU_Battlecruiser);
    AICounterUnitSetup(player, c_BWTU_Valkyrie,         2.00, c_BWTU_Wraith,    1.00, c_BWTU_Valkyrie);
    AICounterUnitSetup(player, c_BWTB_Bunker,           3.00, c_BWTU_Firebat,   1.00, c_BWTU_Battlecruiser);
    AICounterUnitSetup(player, c_BWTU_Battlecruiser,    0.50, c_BWTU_Goliath,   1.00, c_TU_Battlecruiser);
}

//--------------------------------------------------------------------------------------------------
//  BWTerranSubStateName
//--------------------------------------------------------------------------------------------------
string BWTerranSubStateName (int state) {
    // TODO Call the individual difficulties to return a real substate name
    return "-" + IntToString(state) + "-";
}

//--------------------------------------------------------------------------------------------------
//  DebugCallbackBWTe
//--------------------------------------------------------------------------------------------------
void DebugCallbackBWTe (int player) {
    DebugAI("=====BWTERRAN=====\n");
    DebugMelee(player);
    DebugAI("e_mainState = "        + MainStateName(AIState(player, e_mainState))           +
            ", e_mainSubState = "   + BWTerranSubStateName(AIState(player, e_mainSubState)) +
            ", e_attackState = "    + AttackStateName(AIState(player, e_attackState))
    );
}

//--------------------------------------------------------------------------------------------------
//  AINewUnitBWTe
//--------------------------------------------------------------------------------------------------
void AINewUnitBWTe (int player, unit u) {
    wave w;
    string type = UnitGetType(u);

    // ignored units
    //
    if (UnitTypeTestAttribute(type, c_unitAttributeStructure)) {
        return;
    }
    if (UnitTypeTestFlag(type, c_unitFlagWorker)) {
        return;
    }

    // units that stay near home
    //
    if (type == c_BWTU_SCV) {
        AIWaveAddUnitPriority(AIWaveGet(player, c_waveHome), u, c_prioWavePeon);
        return;
    }

    // clear obstacle units
    //
    if (AIWaveNeedClearObsUnits(player)) {
        if (type == c_TU_Marine || type == c_TU_Reaper || type == c_TU_Marauder) {
            AIMergeUnit(player, u, AIWaveGet(player, c_waveClearObs));
            return;
        }
    }

    // diversion units
    if (AIGetFlag(player, e_flagsDiversion)) {
        if (type == c_BWTU_Vulture) {
            AIMergeUnit(player, u, AIWaveGet(player, c_waveDivert1));
            return;
        }
        if (type == c_BWTU_Wraith) {
            AIMergeUnit(player, u, AIWaveGet(player, c_waveDivert2));
            return;
        }
    }

    // Dropship
    //
    if (type == c_BWTU_Dropship) {

        AINewDetector(player, u, false);

        if (AINumEnemyBuildings(player) == 0) {
            if (AIOfferNewScout(player, u)) {
                return;
            }
        }

        AIWaveAddUnitPriority(AIWaveGet(player, c_waveMain), u, c_prioWavePeon);
        return;
    }

    // Vulture
    //
    if (type == c_BWTU_Vulture) {

        AINewDetector(player, u, false);

        if (AINumEnemyBuildings(player) == 0) {
            if (AIOfferNewScout(player, u)) {
                return;
            }
        }

        AIWaveAddUnitPriority(AIWaveGet(player, c_waveMain), u, c_prioWavePeon);
        return;
    }

    // main wave units
    //
    AINewUnitDefault(player, u);
}

//--------------------------------------------------------------------------------------------------
//  AIGetScoutBWTe
//--------------------------------------------------------------------------------------------------
unit AIGetScoutBWTe (int player, int index, unit prev, bool allowWorkers) {
    unit dropship;
    string prevType = UnitGetType(prev);
    
    if (!PlayerBeaconIsSet(player, c_beaconScout) &&
        !AIGetFlag(player, e_flagsScouting)) {
        // if no scouting beacons are set and we're not ready to scout, don't return a unit
        return c_nullUnit;
    }

    if (index == 1 && PlayerBeaconIsSet(player, c_beaconScout)) {
        AISetFlag(player, e_flagsScouting, true);
        if (allowWorkers) {
            // only return a worker, we want to claim a tower
            if (prevType == c_BWTU_SCV) {
                return prev;
            } 
            return AIGrabUnit(player, c_BWTU_SCV, c_prioScout, null);
        }
    }

    if (AINumEnemyBuildings(player) == 0) {
        // only use medivac scouts if we don't know of any enemy buildings
        //   (ie we need a flying scout to check other islands etc).
        if (prevType == c_BWTU_Dropship) {
            return prev;
        }
        dropship = AIGrabUnit(player, c_BWTU_Dropship, c_prioScout, null);
        if (dropship) {
            return dropship;
        }
    }

    if (prev) {
        return prev;
    }

    // back to allowing workers as late scouts
    //if (AIGetFlag(player, e_flagsLateScout)) {
    //    return c_nullUnit;
    //}
    if (!allowWorkers) {
        return c_nullUnit;
    }
    return AIGrabUnit(player, c_BWTU_SCV, c_prioScout, null);
}

//--------------------------------------------------------------------------------------------------
//  AIEarlyDefScoutBWTe
//--------------------------------------------------------------------------------------------------
unit AIEarlyDefScoutBWTe (int player, unit prev, bool allowWorkers) {
    unit obs;
    string prevType; 
    
    if (!AIGetFlag(player, e_flagsEarlyDefScout)) {
        return c_nullUnit;
    }
    prevType = UnitGetType(prev);
    if (prevType == c_BWTU_Dropship) {
        return prev;
    }
    obs = AIGrabUnit(player, c_BWTU_Dropship, c_prioScout, null);
    if (obs) {
        return obs;
    }
    if (prevType == c_BWTU_Marine) {
        return prev;
    }
    obs = AIGrabUnit(player, c_BWTU_Marine, c_prioScout, null);
    if (obs) {
        return obs;
    }
    if (prev) {
        return prev;
    }
    if (!allowWorkers) {
        return c_nullUnit;
    }
    return AIGrabUnit(player, c_BWTU_SCV, c_prioScout, null);
}

//--------------------------------------------------------------------------------------------------
//  AIWaveThinkGen
//--------------------------------------------------------------------------------------------------
void AIWaveThinkBWTe (int player, wave w, int type) {
    AIWaveThinkDefault(player, w, type);
}

//--------------------------------------------------------------------------------------------------
//  BWTerran Init
//--------------------------------------------------------------------------------------------------
static void BWTerranInit (int player) {

    InitCounters(player);
    AIMeleeSharedInit(player);
    AISetFlag(player, e_flagsScouting, false);
    AISetFlag(player, e_flagsEarlyDefScout, false);
    AISetDefaultArmyUnit(player, c_BWTU_Marine);
    AISetDefaultTownHall(player, c_BWTB_CommandCenter);
    AISetNukeConstants(player);
    AIReqAddSpecialMaker(c_BWTU_Nuke, c_BWTB_NuclearSilo, "NukeSCBWArm", 0);

    AISetMainState(player, e_mainState_Open, e_mainSubState_Init);

    if (AIPlayerDifficulty(player) > c_skirHard) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Terran AI: Difficulties above Harder are not supported at this time, please use at most Harder difficulty for this AI"));
    }

}

//--------------------------------------------------------------------------------------------------
void BWTerranOpen (int player);
void BWTerranMid (int player);
void BWTerranLate (int player);

//--------------------------------------------------------------------------------------------------
//  AIMeleeBWTe
//--------------------------------------------------------------------------------------------------
void AIMeleeBWTe (int player) {
    int mainState = AIState(player, e_mainState);

    if (AIPlayerDifficulty(player) >= c_skirChMoney) {
        AIMeleeCheatResources(player);
    }

    if (mainState == e_mainState_Init)      { BWTerranInit(player); }
    else if (mainState == e_mainState_Open) { BWTerranOpen(player); }
    else if (mainState == e_mainState_Mid ) { BWTerranMid (player); }
    else if (mainState == e_mainState_Late) { BWTerranLate(player); }
    else { ErrorMeleeScript(player, "Invalid mainState"); }
}


void BWTerranOpen (int player) {
    int diff = AIPlayerDifficulty(player);
    
    if      (diff == c_skirEasy) { BWTerranOpenEasy(player); }
    //else if (diff == c_skirEasy)     { BWTerranOpenEasy(player); }
    //else if (diff == c_skirMedium)   { BWTerranOpenMedi(player); }
    //else if (diff == c_skirMed_Hard) { BWTerranOpenMdHd(player); }
    //else if (diff == c_skirHard)     { BWTerranOpenHard(player); }
    else                             { BWTerranOpenEasy(player); }

}

void BWTerranMid (int player) {
    int diff = AIPlayerDifficulty(player);

    if      (diff == c_skirVeryEasy) { BWTerranMidEasy(player); }
    //else if (diff == c_skirEasy)     { BWTerranMidEasy(player); }
    //else if (diff == c_skirMedium)   { BWTerranMidMedi(player); }
    //else if (diff == c_skirMed_Hard) { BWTerranMidMdHd(player); }
    //else if (diff == c_skirHard)     { BWTerranMidHard(player); }
    else                             { BWTerranMidEasy(player); }

}

void BWTerranLate (int player) {
    int diff = AIPlayerDifficulty(player);
    
    if      (diff == c_skirVeryEasy) { BWTerranLateEasy(player); }
    //else if (diff == c_skirEasy)     { BWTerranLateEasy(player); }
    //else if (diff == c_skirMedium)   { BWTerranLateMedi(player); }
    //else if (diff == c_skirMed_Hard) { BWTerranLateMdHd(player); }
    //else if (diff == c_skirHard)     { BWTerranLateHard(player); }
    else                             { BWTerranLateEasy(player); }

}
